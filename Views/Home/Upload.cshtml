@{
    ViewBag.Title = "Upload";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using Microsoft.Web.Helpers
@using System.Drawing
@using csce361project1145.Models;
@using csce361project1145.Controllers;
@using System.Drawing.Imaging;
@using System.Text;
@using System.Data.Entity.Validation;
@using System.Diagnostics;
@using System.Data.Entity;

@{
    var fileName = "";
    var fileLocation = "";

    if (IsPost)
    {
        var uploadedFile = Request.Files[0];
        if (uploadedFile.ContentLength > 0)
        {

            var extension = Path.GetExtension(uploadedFile.FileName);
            if (string.Equals(extension, ".jpeg", StringComparison.OrdinalIgnoreCase) || string.Equals(extension, ".jpg", StringComparison.OrdinalIgnoreCase)
)
            {
                var date = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                fileName = Path.GetFileName(uploadedFile.FileName);
                fileLocation = Server.MapPath("~/Content/Upload/" + User.Identity.Name + date + fileName);
                uploadedFile.SaveAs(fileLocation);
                var serverFileLocation = "../../Content/Upload/" + User.Identity.Name + date + fileName;
                var picture = new picture();
                var context = new dsimpsonEntities8();
                picture.url = serverFileLocation;
                picture.userId = Convert.ToInt32(Request.Cookies["userId"].Value);
                picture.caption = Request.Form["caption"];
                var image = new Bitmap(uploadedFile.InputStream);
                PropertyItem[] propItems = image.PropertyItems;
                int locationId;


                ASCIIEncoding encodings = new ASCIIEncoding();
                string latRef = "0";
                String[] table = new String[2];
                table[0] = " ";
                table[1] = " ";
                double latDegrees = 0;
                double latMinutes = 0;
                double latSeconds = 0;
                double longDegrees = 0;
                double longMinutes = 0;
                double longSeconds = 0;
                try
                {
                    //latitude Ref prop[40]

                    latRef = encodings.GetString(propItems[40].Value);


                    //Latitude
                    uint latDegreesNumerator = BitConverter.ToUInt32(propItems[41].Value, 0);
                    uint latDegreesDenominator = BitConverter.ToUInt32(propItems[41].Value, 4);
                    latDegrees = (double)latDegreesNumerator / (double)latDegreesDenominator;

                    uint latMinutesNumerator = BitConverter.ToUInt32(propItems[41].Value, 8);
                    uint latMinutesDenominator = BitConverter.ToUInt32(propItems[41].Value, 12);
                    latMinutes = ((double)latMinutesNumerator / (double)latMinutesDenominator) / 60;

                    uint latSecondsNumerator = BitConverter.ToUInt32(propItems[41].Value, 16);
                    uint latSecondsDenominator = BitConverter.ToUInt32(propItems[41].Value, 20);
                    latSeconds = ((double)latSecondsNumerator / (double)latSecondsDenominator) / 3600;

                }
                catch
                {
                    Console.WriteLine("Error in latitude ");
                }

                try
                {
                    //Longitude Ref prop[42]
                    string longRef = encodings.GetString(propItems[42].Value);

                    //longitude
                    uint longDegreesNumerator = BitConverter.ToUInt32(propItems[43].Value, 0);
                    uint longDegreesDenominator = BitConverter.ToUInt32(propItems[43].Value, 4);
                    longDegrees = -1 * (double)longDegreesNumerator / (double)longDegreesDenominator;

                    uint longMinutesNumerator = BitConverter.ToUInt32(propItems[43].Value, 8);
                    uint longMinutesDenominator = BitConverter.ToUInt32(propItems[43].Value, 12);
                    longMinutes = ((double)longMinutesNumerator / (double)longMinutesDenominator) / 60;

                    uint longSecondsNumerator = BitConverter.ToUInt32(propItems[43].Value, 16);
                    uint longSecondsDenominator = BitConverter.ToUInt32(propItems[43].Value, 20);
                    longSeconds = ((double)longSecondsNumerator / (double)longSecondsDenominator) / 3600;
                }
                catch
                {
                    Console.WriteLine("Error in longitude");
                }


                var longSub = (longMinutes + longSeconds) * 10;
                var latSub = (latMinutes + latSeconds) * 10;

                //table 0 is latitude; table 1 is longitude
                table[1] = latDegrees + "." + latSub.ToString().Replace(".", string.Empty);
                table[0] = longDegrees + "." + longSub.ToString().Replace(".", string.Empty);

                var tmplat = table[0];
                var tmplong = table[1];


                var location = context.locations.Where(x => x.longitude.Equals(tmplong)).Where(x => x.latitude.Equals(tmplat)).ToList();
                if (location.Count > 0)
                {
                    locationId = location[0].locationId;
                }
                else
                {
                    var newLocation = new location();
                    newLocation.longitude = table[1];
                    newLocation.latitude = table[0];
                    context.locations.Add(newLocation);
                    context.SaveChanges();
                    locationId = newLocation.locationId;

                }
                picture.locationId = locationId;
                context.pictures.Add(picture);
                try
                {
                    context.SaveChanges();
                    <script> window.location.href = "@Url.Action("ViewMap", "home")";</script>
                }
                catch (DbEntityValidationException dbEx)
                {
                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                    {
                        foreach (var validationError in validationErrors.ValidationErrors)
                        {
                            Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                        }
                    }
                }




            }
            else
            {
                <script>
                    window.alert("Please upload only JPG/JPEG!");
                    location.reload();
                </script>
            }



        }
        else
        {
            <script>
                window.alert("Please select a file to upload!");
                location.reload();
            </script>

        }


    }
}


<!DOCTYPE html>
<html>
<head>
    <title>Upload your picture!</title>
</head>
<body>



    <form id="myForm" method="post"
          enctype="multipart/form-data"
          action="">
        <div>
            <h1><p>File Upload</p></h1>
            <center>
            @if (!IsPost)
            {
                @FileUpload.GetHtml(
        initialNumberOfFiles: 1,
        allowMoreFilesToBeAdded: false,
        includeFormTag: true,
        uploadText: "Upload");
            }
            <br />
         <p>Caption:</p>@Html.TextBox("caption", "", new { placeholder = "Please enter a caption!", @maxlength = "150", @autocomplete = "off" })</center>

        </div>
    </form>



</body>
</html>
